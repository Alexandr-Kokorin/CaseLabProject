app:
  scheduler:
    enable: true
    interval: 1800s
    force-check-delay: 10s
  retry:
    max-attempts: 5
    delay: 500
    multiplier: 2

spring:
  application:
    name: project
  liquibase:
    enabled: false
  datasource:
    url: jdbc:postgresql://${POSTGRES_CONTAINER_NAME:localhost}:5432/${POSTGRES_DB:project}
    username: ${POSTGRES_USER:postgres}
    password: ${POSTGRES_PASSWORD:postgres}
    driver-class-name: org.postgresql.Driver
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        enable_lazy_load_no_trans: true
  kafka:
    bootstrap-servers: localhost:9094
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
  cache:
    cache-names:
      - rate-limit-buckets-project
    caffeine:
      spec: maximumSize=100000,expireAfterAccess=3600s
  servlet:
    multipart:
      max-file-size: 100MB
      max-request-size: 120MB
  mail:
    host: ${MAIL_HOST:postbox.cloud.yandex.net}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            connection-timeout: 5000
            timeout: 5000
            write-timeout: 5000
        transport.protocol: smtp
  elasticsearch:
    uris: http://${ELASTIC_HOST:localhost:9200}

bucket4j:
  enabled: true
  filters:
    - cache-name: rate-limit-buckets-project
      url: /.*
      http-response-body: "{ \"status\": 429, \"error\": \"Too Many Requests\", \"message\": \"You have exhausted your API Request Quota\" }"
      rate-limits:
          cache-key: "getRemoteAddr()"
          bandwidths:
            - capacity: 1000
              time: 1
              unit: minutes
              refill-speed: interval

server:
  port: 8080
  forward-headers-strategy: NATIVE

logging:
  config: classpath:log4j2-plain.xml
  level:
    org.apache.kafka: warn

spring-doc:
  swagger-ui:
    path: /swagger-ui
  default-produces-media-type: application/json

minio:
  buckets: document-version
  url: ${MINIO_URL:http://127.0.0.1:9000}
  accessKey: ${MINIO_ACCESS_KEY:minioadmin}
  secretkey: ${MINIO_SECRET_KEY:minioadmin}

management:
  endpoint:
    prometheus:
      enabled: true
    metrics:
      enabled: true
    health:
      show-details: always
  endpoints:
    web:
      exposure:
        include: '*'

jwt:
  secret: ${JWT_SECRET:55d731c263e1ddb8e50eec214ccf010207b82cfb415c76976751a12f1f04c2ca}
  ttl: 30 # in minutes
